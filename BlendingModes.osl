///#include "stdosl.h"
//////////////////////////////////////////////////////////////////////////////////////
/////This shader uses the rotation imput to correct the normal vector in rotated 
/////tiled textures
//////////////////////////////////////////////////////////////////////////////////////
shader BlendingModes

[[string maya_typeID = "0x04050"]]

(
///define inputs//

int type = 0 [[ string widget = "popup", string options = over|multiply|screen|overlay|hardlight|softlight|colordodge|colorburn|add|sub|average|divide|difference|darken|lihgten|hue|sat|value]],

color CinA = 0.5,

color CinB = 0.5,

color factor = 1,

int clampLdr = 0 [[string widget = "boolean"]],

///definr output

output color Cout = 0,

)

{

///adding fusion modes
///over
color over = CinB;

///Multiply
color colorMultiply = CinA * CinB;

///Screen
color colorScreen = 1-((1-CinA)*(1-CinB));

///Overlay
float overlayR = 0;
float overlayG = 0;
float overlayB = 0;

	///redeOverlay
		if (CinA[0]<0.5)
		{
			overlayR=2 * CinA[0] * CinB[0];
		}
		else
        {
        	overlayR=1 - 2*(1-CinA[0]) * (1-CinB[0]);
        }

    ///greenOverlay
    	if (CinA[1]<0.5)
		{
			overlayG= 2 * CinA[1] * CinB[1];
		}
		else
        {
        	overlayG= 1- 2*(1-CinA[1]) * (1-CinB[1]);
        }

    ///BlueOverlay
    	if (CinA[2]<0.5)
		{
			overlayB= 2 * CinA[2] * CinB[2];
		}
		else
        {
        	overlayB= 1 - 2*(1-CinA[2]) * (1-CinB[2]);
        }

color overlayColor = color ("rgb", overlayR ,overlayG , overlayB);

///hardlight
color hardlight = 0;
float hardlightR = 0;
float hardlightG = 0;
float hardlightB = 0;

	//RedHardlight

	if (CinA[0]<0.5)
		{
			hardlightR = CinA[0] * CinB[0];
		}
	else
		{
			hardlightR = 1 - ( (1-CinA[0]) * (1-CinB[0]) );
		}

	//GreenHardlight
	if (CinA[1]<0.5)
		{
			hardlightG = CinA[1] * CinB[1];
		}
	else
		{
			hardlightG = 1 - ( (1-CinA[1]) * (1-CinB[1]) );
		}

	//BlueHardlight
	if (CinA[2]<0.5)
		{
			hardlightB = CinA[2] * CinB[2];
		}
	else
		{
			hardlightB = 1 - ( (1-CinA[2]) * (1-CinB[2]) );
		}

hardlight = color("rgb",hardlightR,hardlightG,hardlightB);

///soflihgt

color softlight = ((1-(2*CinB))*CinA*CinA)+(2*CinB*CinA);

///colorDodge

color colorDodge = (CinA/(1-CinB));

///colorBurn

color colorBurn = 1-((1-CinA/CinB));

///add

color Addition = CinA+CinB;

///sub

 color Subtraction = CinA-CinB;

///difference

color difference = abs(CinA-CinB);

///average

color average = (CinA + CinB)*0.5;

///divide 

color divide = CinA/CinB;

///darken

color darken = min (CinA, CinB);

///lighten

color lighten = max(CinA, CinB);

///hue

color CinAHSV = transformc ("rgb","hsv", CinA);

color CinBHSV = transformc ("rgb","hsv", CinB);

color hue = color ("hsv", CinBHSV[0], CinAHSV[1], CinAHSV[2]);

///sat

color sat = color ("hsv", CinAHSV[0], CinBHSV[1], CinAHSV[2]);

///value

color value = color ("hsv", CinBHSV[0], CinAHSV[1], CinAHSV[2]);


///Adding list to select 

color mode [18]={	over,
					colorMultiply,
					colorScreen,
					overlayColor,
					hardlight,
					softlight,
					colorDodge,
					colorBurn,
					Addition,
					Subtraction,
					average,
					divide,
					difference,
					darken,
					lighten,
					hue,
					sat,
					value
				};

color mixedcolor = mix(CinA, (mode[type]), factor );

color lastcolor = 1;

///preclamping values

int clampInt=clampLdr;

if ( clampInt = 1)
	{lastcolor = clamp (mixedcolor, 0, 1);}
else
	{lastcolor = mixedcolor;}

Cout = lastcolor;

}