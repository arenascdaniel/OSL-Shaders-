///#include "stdosl.h"
//////////////////////////////////////////////////////////////////////////////////////
/////This node allows you to create the illusion of endles tiled texture with patterns, 
/////mixing similar textures 
//////////////////////////////////////////////////////////////////////////////////////
shader daMixTiles

[[string maya_typeID = "0x04057"]]

(
///define inputs

int txAmount = 4 [[string widget = "popup", string options = "2|3|4|5|6|7|8"]],

int randomnes = 0,

int seed = 1,

///texture inputs

string 	txA =""[[string widget = "filename"]],
color 	cA  = 1,
string 	txB =""[[string widget = "filename"]],
color 	cB  = 1,
string 	txC =""[[string widget = "filename"]],
color 	cC  = 1,
string 	txD =""[[string widget = "filename"]],
color 	cD  = 1,
string 	txE =""[[string widget = "filename"]],
color 	cE  = 1,
string 	txF =""[[string widget = "filename"]],
color 	cF  = 1,
string 	txG =""[[string widget = "filename"]],
color 	cG  = 1,
string 	txH =""[[string widget = "filename"]],
color 	cH  = 1,

///Seam texture
float seamWidth = 0,

float seamSmoth = 0,

string txSeam = ""[[string widget = "filename"]],

///Uv properties
string uvset = "map1",
int mipMapBias = 0,

float Urepeat = 10,
float Vrepeat = 10,

float Uoffset = 0,
float Voffset = 0,

float UVrotate = 0 [[int slider = 1]],

///CC properties

float Hue = 0,
float Sat = 1,
float Val = 1,

///define output
output color Cout = 0,

)

{

 ///Defining Uvs
 	///Get maya UVset and bias
 	point st = point(u,v,0);
 	getattribute("map1", st);
 	int bias = int((-mipMapBias)+ min(Urepeat,Vrepeat));

 	///adding offset in Uvs
 	float sO = st[0] + Uoffset ;
 	float tO = st[1] + Voffset ;

 	///adding rotation
 		///degrees to radians
 	float rds = radians(UVrotate);

 	float sRot = ( (sO-0.5) * cos(rds) - (tO-0.5) * sin(rds) )+0.5;
 	float tRot = ( (sO-0.5) * sin(rds) + (tO-0.5) * cos(rds) )+0.5;

 	///adding scale

 	float sScale = sRot*Urepeat;
 	float tScale = tRot*Vrepeat;

 ///Constructing sequencial IDs and adding random from cellnoise
 	/// converting in int values
 	float sFloat = floor(sScale);
 	float tFloat = floor(tScale);

 	float rand = cellnoise(sScale,tScale)*randomnes;


 	int cellID = int(mod((tFloat+sFloat+rand),txAmount));

 	///Creating texture and color lists

 	color colCell[8] = {cA, cB, cC, cD, cE, cF, cG, cH };

 	string texCell[8] = {txA, txB, txC, txD, txE, txF, txG, txH};

 	///texture fuction 

 	color texCol = (texture(texCell[cellID], sScale, tScale, Dx(u)*bias, Dx(v)*bias, Dy(u)*bias, Dy(v)*bias, "wrap", "periodic"))*colCell[cellID];



 Cout = colCell[cellID];


}
